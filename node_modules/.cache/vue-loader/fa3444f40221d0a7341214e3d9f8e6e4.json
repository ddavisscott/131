{"remainingRequest":"/Users/FOXDIE/Documents/131/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/FOXDIE/Documents/131/src/views/Profile.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/FOXDIE/Documents/131/src/views/Profile.vue","mtime":1559420213305},{"path":"/Users/FOXDIE/Documents/131/node_modules/cache-loader/dist/cjs.js","mtime":1559591250236},{"path":"/Users/FOXDIE/Documents/131/node_modules/babel-loader/lib/index.js","mtime":1559591250115},{"path":"/Users/FOXDIE/Documents/131/node_modules/vuetify-loader/lib/loader.js","mtime":1559591254643},{"path":"/Users/FOXDIE/Documents/131/node_modules/cache-loader/dist/cjs.js","mtime":1559591250236},{"path":"/Users/FOXDIE/Documents/131/node_modules/vue-loader/lib/index.js","mtime":1559591254571}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {mapState} from 'vuex'\nexport default {\n  data () {\n    return {\n      loading: true,\n      editing: false,\n      userId: null,\n      userEmail: '',\n      firstName: '',\n      lastName: '',\n      avatar: '',\n      imageUrl: '',\n      joined: '',\n      updated: '',\n      isAdmin: false,\n      userLevel: 'free',\n      editedFirstName: '',\n      editedLastName: '',\n      editedAvatar: '',\n      image: null,\n      imageExt: ''\n    }\n  },\n  computed: {\n    ...mapState(['user', 'userProfile'])\n  },\n  mounted: function() {\n    var self = this\n    setTimeout(function(){\n      self.userId = self.user.uid\n      self.userEmail = self.user.email\n      if (self.userProfile.isAdmin) {\n        self.isAdmin = self.userProfile.isAdmin\n      }\n      if (self.userProfile.userLevel) {\n        self.userLevel = self.userProfile.userLevel\n      }\n      if (self.userProfile.joinDate) {\n        self.joined = self.userProfile.joinDate\n      }\n      if (self.userProfile.updated) {\n        self.updated = self.userProfile.updated\n      }\n      if (self.userProfile.firstName) {\n        self.firstName = self.userProfile.firstName\n        self.editedFirstName = self.userProfile.firstName\n      }\n      if (self.userProfile.lastName) {\n        self.lastName = self.userProfile.lastName\n        self.editedLastName = self.userProfile.lastName\n      }\n      if (self.userProfile.avatar) {\n        self.avatar = self.userProfile.avatar\n        self.editedAvatar = self.userProfile.avatar\n      }\n      if (self.userProfile.imageUrl) {\n        self.imageUrl = self.userProfile.imageUrl\n      }\n      if (self.userProfile.imageExt) {\n        self.imageExt = 'https://firebasestorage.googleapis.com/v0/b/mirror2019-b60e0.appspot.com/o/users%2F'+self.user.uid+self.userProfile.imageExt+'?alt=media'\n      }\n      self.loading = false\n    }, 2000)\n  },\n  methods: {\n    onUpdateProfile () {\n      this.editing = false\n      const dateNow = new Date()\n      this.$store.dispatch('updateUserData', {\n        id: this.userId,\n        firstName: this.editedFirstName,\n        lastName: this.editedLastName,\n        image: this.image,\n        updated: dateNow\n      })\n      this.firstName = this.editedFirstName,\n      this.lastName = this.editedLastName,\n      this.avatar = this.editedAvatar\n    },\n    onCloseEdit () {\n      this.editing = false\n    },\n    onClickEdit () {\n      this.editing = true\n    },\n    onPickFile () {\n      this.$refs.fileInput.click()\n    },\n    onFilePicked (event) {\n      const files = event.target.files\n      let fileName = files[0].name\n      if (fileName.lastIndexOf('.') <= 0) {\n        alert('Please add a valid image (.jpg, .png, .gif)')\n      }\n      const fileReader = new FileReader()\n      fileReader.addEventListener('load', () => {\n        this.imageUrl = fileReader.result\n      })\n      fileReader.readAsDataURL(files[0])\n      this.image = files[0]\n    }\n  }\n}\n",{"version":3,"sources":["Profile.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"Profile.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-container>\n    <v-layout row>\n      <v-flex xs12>\n        <div v-if=\"loading === true\">\n          <div class=\"fingerprint-spinner\">\n            <div class=\"spinner-ring\"></div>\n            <div class=\"spinner-ring\"></div>\n            <div class=\"spinner-ring\"></div>\n            <div class=\"spinner-ring\"></div>\n            <div class=\"spinner-ring\"></div>\n            <div class=\"spinner-ring\"></div>\n            <div class=\"spinner-ring\"></div>\n            <div class=\"spinner-ring\"></div>\n            <div class=\"spinner-ring\"></div>\n          </div>\n        </div>\n        <div v-else>\n          <h3>Profile <strong>Admin?: </strong> {{ this.isAdmin }}</h3>\n          <v-avatar\n              v-if=\"this.imageExt\"\n              :tile=\"tile\"\n              :size=\"100\"\n              color=\"grey lighten-4\"\n            >\n              <img :src=\"this.imageExt\" alt=\"User Avatar\">\n            </v-avatar>\n          <div v-if=\"!editing\">\n            <span> {{ this.userId }}  | {{ this.userLevel }}</span><br />\n            <span> {{ this.userEmail }} </span><br />\n            <span> {{ this.firstName }} {{ this.lastName}} </span><br />\n            <span> Joined: {{ this.joined }} </span><br />\n            <span> Updated: {{ this.updated }} </span><br />\n            <v-btn color=\"green\" @click=\"onClickEdit\">Edit Profile</v-btn>\n          </div>\n          <div v-else>\n            Edit stuff here\n            <form>\n              <v-flex xs12 sm6 md3>\n                <v-text-field\n                  v-model=\"editedFirstName\"\n                  label=\"First Name\"\n                  single-line\n                  outline\n                ></v-text-field>\n              </v-flex>\n              <v-flex xs12 sm6 md3>\n              <v-text-field\n                v-model=\"editedLastName\"\n                label=\"Last Name\"\n                single-line\n                outline\n                ></v-text-field>\n              </v-flex>\n              <v-flex xs12 sm6 offset-sm3>\n                <v-btn raised class=\"primary\" @click=\"onPickFile\">Upload Image</v-btn>\n                <input\n                  type=\"file\"\n                  style=\"display: none\"\n                  ref=\"fileInput\"\n                  accept=\"image/*\"\n                  @change=\"onFilePicked\">\n              </v-flex>\n              <v-flex xs12 sm6 offset-sm3>\n                <img :src=\"imageUrl\" height=\"150\">\n              </v-flex>\n              <v-btn color=\"red\" @click=\"onCloseEdit\">Close</v-btn>\n              <v-btn color=\"green\" @click=\"onUpdateProfile\">Update Profile</v-btn>\n            </form>\n          </div>\n          <div v-if=\"this.isAdmin\">\n            <h4>Only show to Admin</h4>\n            <p>{{ userProfile.isAdmin }}</p>\n          </div>\n        </div>\n      </v-flex>\n    </v-layout>\n  </v-container>\n</template>\n<script>\nimport {mapState} from 'vuex'\nexport default {\n  data () {\n    return {\n      loading: true,\n      editing: false,\n      userId: null,\n      userEmail: '',\n      firstName: '',\n      lastName: '',\n      avatar: '',\n      imageUrl: '',\n      joined: '',\n      updated: '',\n      isAdmin: false,\n      userLevel: 'free',\n      editedFirstName: '',\n      editedLastName: '',\n      editedAvatar: '',\n      image: null,\n      imageExt: ''\n    }\n  },\n  computed: {\n    ...mapState(['user', 'userProfile'])\n  },\n  mounted: function() {\n    var self = this\n    setTimeout(function(){\n      self.userId = self.user.uid\n      self.userEmail = self.user.email\n      if (self.userProfile.isAdmin) {\n        self.isAdmin = self.userProfile.isAdmin\n      }\n      if (self.userProfile.userLevel) {\n        self.userLevel = self.userProfile.userLevel\n      }\n      if (self.userProfile.joinDate) {\n        self.joined = self.userProfile.joinDate\n      }\n      if (self.userProfile.updated) {\n        self.updated = self.userProfile.updated\n      }\n      if (self.userProfile.firstName) {\n        self.firstName = self.userProfile.firstName\n        self.editedFirstName = self.userProfile.firstName\n      }\n      if (self.userProfile.lastName) {\n        self.lastName = self.userProfile.lastName\n        self.editedLastName = self.userProfile.lastName\n      }\n      if (self.userProfile.avatar) {\n        self.avatar = self.userProfile.avatar\n        self.editedAvatar = self.userProfile.avatar\n      }\n      if (self.userProfile.imageUrl) {\n        self.imageUrl = self.userProfile.imageUrl\n      }\n      if (self.userProfile.imageExt) {\n        self.imageExt = 'https://firebasestorage.googleapis.com/v0/b/mirror2019-b60e0.appspot.com/o/users%2F'+self.user.uid+self.userProfile.imageExt+'?alt=media'\n      }\n      self.loading = false\n    }, 2000)\n  },\n  methods: {\n    onUpdateProfile () {\n      this.editing = false\n      const dateNow = new Date()\n      this.$store.dispatch('updateUserData', {\n        id: this.userId,\n        firstName: this.editedFirstName,\n        lastName: this.editedLastName,\n        image: this.image,\n        updated: dateNow\n      })\n      this.firstName = this.editedFirstName,\n      this.lastName = this.editedLastName,\n      this.avatar = this.editedAvatar\n    },\n    onCloseEdit () {\n      this.editing = false\n    },\n    onClickEdit () {\n      this.editing = true\n    },\n    onPickFile () {\n      this.$refs.fileInput.click()\n    },\n    onFilePicked (event) {\n      const files = event.target.files\n      let fileName = files[0].name\n      if (fileName.lastIndexOf('.') <= 0) {\n        alert('Please add a valid image (.jpg, .png, .gif)')\n      }\n      const fileReader = new FileReader()\n      fileReader.addEventListener('load', () => {\n        this.imageUrl = fileReader.result\n      })\n      fileReader.readAsDataURL(files[0])\n      this.image = files[0]\n    }\n  }\n}\n</script>\n"]}]}